
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both
arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000
 

Follow up:

What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?








1) Solution  Using ArrayList
*******************************************************************************************************
import java.util.ArrayList;
import java.util.List;

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> list = new ArrayList<>();
        
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                if (nums1[i] == nums2[j]) {
                    list.add(nums1[i]);

   //set nums2[j] to Integer.MIN_VALUE to mark it as visited, and break out of the inner loop.                 
                    nums2[j] = Integer.MIN_VALUE;
                    break;
                }
            }
        }
        
        int[] result = new int[list.size()];
        for (int i = 0; i < result.length; i++) {
            result[i] = list.get(i);
        }
        return result;
    }
}

***********************************************************************************************************
DRY RUN : 

nums1 = [4, 9, 5, 5, 5]
nums2 = [9, 4, 9, 8, 4, 5]

First, we create an empty list list to store the common elements between the two arrays.

We loop through nums1 array and for each element nums1[i], we loop through nums2 array.

Inside the inner loop, we compare nums1[i] with nums2[j]. If they are equal, we add nums1[i] to the list. We then set nums2[j] to Integer.MIN_VALUE to mark it as visited, and break out of the inner loop.

We repeat steps 2 and 3 until we have processed all elements in nums1 array.

After the above steps, list will contain all the common elements between nums1 and nums2.

Next, we create an integer array result of size equal to the number of elements in list.

We then copy the elements from list to result array.

Finally, we return the result array.

So for the example given above, the result array will be [4, 9, 5, 5, 5], which are the common elements between nums1 and nums2.
