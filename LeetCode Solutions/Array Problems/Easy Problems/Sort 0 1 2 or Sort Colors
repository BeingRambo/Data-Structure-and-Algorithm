Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?




************************************************************************************************************************

Intuition
Intution here is do it in a single pass with 3 pointers.

low pointer = 0 , this check all the entries before it are 0
mid pointer = 0, this will be used to iterate the array
high pointer = array length -1, this checkk all the entries after it are 2.
Now, we will iterate the array and check if the element is 0 then swap with low pointer and increment both low pointer and mid pointer.
If the element is 1 just increment the mid pointer
if the element is 2 swap with high pointer and decrement high but do not increment mid.( This is because if the number swapped from high pointer was 
0 then we need to re swap it with low pointer).



Approach
Take 3 Pointers low = 0, mid = 0 and high = nums.length -1;
Use loop to iterate the array with condition mid <= high.(Since we only need to check middle elements of low and high).
if element is 0 swap with low and low++, mid++.
if element is 1 then mid++.
if element is 2 then swap with high and high--.
Complexity
Time complexity:
Linear O(N), here N is number of elements in the array.



Space complexity:
Constant O(1).

1)Solution
********************************************************************************************************************
class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length-1;

        while(mid <= high){
            if(nums[mid] == 0 ){
                //swap with left
                swap(nums,low, mid );
                low++;
                mid++;
            }else if(nums[mid] == 2){
                swap(nums, mid, high);
                high--;
            }else{
                mid++;
            }
        }
    }

    public static void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
************************************************************************************************
