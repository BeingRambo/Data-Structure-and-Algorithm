Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

****************************************************************************************************



1)Soution Bruteforce
************************************************************************************************
Approach
First Sort the Array.
Then Compare elements one by one.
We Only have to return a boolean value.
Complexity
Time complexity: O(nlog(n))
Space complexity: O(1)



Code
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums); 
        for (int i = 0; i < nums.length - 1; i++) {
                if (nums[i] == nums[i+1]) {
                    return true;
                }
        }
        return false;
    }
}

*****************************************************************************************************



2) Solution                     Hashmap
**************************************************************************************************
Approach
First Sort the Array.
Then Compare elements one by one.
We Only have to return a boolean value.
Complexity
Time complexity: O(nlog(n))
Space complexity: O(1)



Code
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums); 
        for (int i = 0; i < nums.length - 1; i++) {
                if (nums[i] == nums[i+1]) {
                    return true;
                }
        }
        return false;
    }
}



******************************************************************************************




3)Solution Hashset
******************************************************************************************

omplexity using a HashSet
Time complexity: O(n)
Space complexity: O(n)




Code
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
                if (set.contains(nums[i])) {
                    return true;
                }
                set.add(nums[i]);
        }
        return false;
    }
}












